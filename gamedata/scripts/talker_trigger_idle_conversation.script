---@diagnostic disable: undefined-global
package.path = package.path .. ";./core/lua/?.lua;"

local interface = require("interface.interface")
local game = require("infra.game_adapter")
local log = require('framework.logger')

-- Import game interface modules
local queries = talker_game_queries
---------------------------------------------------------------------------------------------
-- CONDITIONS
--------------------------------------------------------------------------------------------
local last_idle_conversation_time_ms = 0
local idle_conversation_time_cooldown_ms = 10 * 60 * 1000 -- 10 minutes

local function cooldown_ready()
    return queries.get_game_time_ms() - last_idle_conversation_time_ms > idle_conversation_time_cooldown_ms
end

local function someone_should_make_idle_conversation()
    local result = cooldown_ready() and queries.is_player_in_combat()
    -- reset cooldown
    if result then last_idle_conversation_time_ms = queries.get_game_time_ms() end
    return result
end

---------------------------------------------------------------------------------------------
-- IDLE CONVERSATION
--------------------------------------------------------------------------------------------
function on_every_10_seconds()
    if not someone_should_make_idle_conversation() then return end

    --- create event
    local candidates = game.get_characters_near_player
    local random_speaker = candidates[math.random(#candidates)]
    if queries.is_in_combat(random_speaker) then return end

    interface.register_character_instructions("%s begins an idle conversation to pass the time", random_speaker)
end

--------------------------------------------------------------------------------------------
-- Set up
--------------------------------------------------------------------------------------------

local function safe_on_every_10_seconds()
    local status, err = pcall(function()
        on_every_10_seconds()
    end)
    if not status then
        log.error("Error in safe_on_every_10_seconds: " .. err)
    end
end

-- keep track of a timer and only do a real check every 10 seconds
local last_check_time_ms = 0
local CHECK_INTERVAL_MS = 10 * 1000
local function on_every_ms()
    if queries.get_game_time_ms() - last_check_time_ms < CHECK_INTERVAL_MS then return end
    last_check_time_ms = queries.get_game_time_ms()
    safe_on_every_10_seconds()
end

function on_game_start()
    RegisterScriptCallback("on_actor_update", on_every_ms)
end

function is_loaded()
    return true
end
