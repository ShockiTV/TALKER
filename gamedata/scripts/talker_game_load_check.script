local game = require("infra.game_adapter")
local log = require('framework.logger')

-- Function called when the game starts
local modules = {
    talker_game_async = "Talker Game Async",
    talker_game_commands = "Talker Game Commands",
    talker_game_queries = "Talker Game Queries",
    talker_input_mic = "Talker Input Mic",
    talker_input_chatbox = "Talker Input Chatbox",
    talker_trigger_reload = "Talker Trigger Reload",
    talker_game_files = "Talker Game Files",
    talker_trigger_artifact = "Talker Trigger Artifacts",
    talker_listener_game_event = "Talker Listener Game Event",
    talker_listener_game_event_near_player = "Talker Listener Game Event Near Player",
    talker_listener_player_speaks = "Talker Listener Player Speaks"
}

-- intentionally duplicated
local function display_hud_message(input)
    log.info("displaying: " .. input)
    actor_menu.set_msg(1, input, 3)
end

function check_loaded_modules()
    local all_loaded = true
    for key, name in pairs(modules) do
        local status, result = pcall(function()
            return _G[key] and _G[key].is_loaded()
        end)
        if not status or not result then
            all_loaded = false
            display_hud_message("TALKER module " .. name .. " not loaded")
        end
    end
    if game.is_mock() then
        display_hud_message('Looks like a testing module is loaded, not normal in game. Tell Dan.')
    end
    if all_loaded then
        display_hud_message("All TALKER modules loaded")
    end
end

function on_game_start()
    RegisterScriptCallback("on_loading_screen_dismissed", check_loaded_modules)
end
