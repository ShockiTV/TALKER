package.path = package.path .. ";./bin/lua/?.lua;"
local log = require("framework.logger")
local config = require("interface.config")

function must_exist(obj, func_name)
    if not obj then
        error(func_name .. " called with nil object")
    end
end

-- Execute a function within a protected call and log any errors
function try(func, ...)
    local status, result = pcall(func, ...)
    if not status then
        log.warn("Error: " .. tostring(result))
        return nil
    end
    return result
end

function get_game_path()
    return getFS():update_path("$game_config$", "") .. "\\"
end

-- OBJECTS

function get_technical_name(object)
    must_exist(object, "get_technical_name")
    return object:section()
end

function get_technical_name_by_id(id)
    local obj = get_obj_by_id(id)
    return obj and get_technical_name(obj) or "Unknown"
end

function is_item(item)
    must_exist(item, "is_item")
    return ui_item.get_sec_name(item:section()) ~= ""
end

function get_item_description(item)
    must_exist(item, "get_item_description")
    return ui_item.get_sec_name(get_technical_name(item))
end

function get_item_name(item)
    return ui_item.get_sec_name(item:section())
end

function is_weapon(item)
    must_exist(item, "is_weapon")
    return IsWeapon(item)
end

function is_artifact(obj)
    return obj:is_artefact() -- base game
end

-- PLAYER

function get_player()
    return db.actor
end

function is_player(npc)
    if not npc then return false end
    return npc:id() == 0 or false
end

function get_player_weapon()
    return db.actor:active_item()
end

function is_player_alive()
    return db.actor:alive()
end

-- CHARACTER

function is_stalker(object)
    must_exist(object, "is_stalker")
    return try(IsStalker, object)
end

function is_monster(object)
    must_exist(object, "is_monster")
    return try(IsMonster, object)
end

function get_id(obj)
    if not obj then
        error("get_id called with nil obj")
    end
    return tostring(obj:id())
end

function is_alive(obj)
    must_exist(obj, "is_alive")
    return obj:alive()
end

function get_name(creature)
    must_exist(creature, "get_name")
    return creature:character_name() or describe_mutant(creature)
end

-- Function to get human-readable names for mutants based on patterns in their technical names
function describe_mutant(mutant)
    must_exist(mutant, "describe_mutant")
    local mutant_technical_name = get_technical_name(mutant)
    -- TODO move to XML or replace entirely with pre-existing function
    local patternToNameMap = {
        ["zombie"] = "Zombie",
        ["rat"] = "Rat",
        ["tushkano"] = "Tushkano",
        ["boar"] = "Boar (bulletproof head)", -- or the AI will keep talking about shooting them in the head
        ["flesh"] = "Flesh (mutant pig, relatively passive)",
        ["pseudodog"] = "Pseudodog",
        ["cat"] = "Mutant Cat",
        ["fracture"] = "Fracture",
        ["snork"] = "Snork",
        ["lurker"] = "Lurker",
        ["bloodsucker"] = "Bloodsucker",
        ["psy_dog"] = "Psy Dog",
        ["burer"] = "Burer",
        ["controller"] = "Controller",
        ["poltergeist"] = "Poltergeist",
        ["psysucker"] = "Psysucker",
        ["chimera"] = "Chimera (extremely dangerous!)",
        ["gigant"] = "Pseudogiant (extremely dangerous!)",
        ["karlik"] = "Karlik",
        ["dog"] = "Dog" -- always check dog last to not pick it over pseudodog or psy_dog
        -- Add more patterns as needed...
    }

    for pattern, name in pairs(patternToNameMap) do
        if string.find(mutant_technical_name, pattern) then
            return "a " .. name
        end
    end
    return "a " .. mutant_technical_name -- For modded mutants, give the mutant technical name to the AI and hope for the best
end

function get_name_by_id(id)
    local obj = get_obj_by_id(id)
    return obj and get_name(obj) or "Unknown"
end

function get_weapon(npc)
    must_exist(npc, "get_weapon")
    return npc:active_item()
end

-- RELATIONS

function get_relations(observer, target)
    return try(observer.relation, observer, target) or 1
end

function are_neutral(observer, target)
    return get_relations(observer, target) == game_object.neutral
end

function are_friends(observer, target)
    return get_relations(observer, target) == game_object.friend
end

function are_enemies(observer, target)
    local relations = get_relations(observer, target)
    return relations == game_object.enemy
end

-- SQUADS

function get_squad(obj)
    return try(get_object_squad, obj)
end

function is_companion(npc)
    return npc:has_info("npcx_is_companion")
end

-- COMBAT

function get_enemies_fighting_player()
    return xr_combat_ignore.fighting_with_actor_npcs
end

function is_enemy_fighting_player(enemy)
    must_exist(enemy, "is_enemy_fighting_player")
    return xr_conditions.is_enemy_fighting_actor(enemy)
end

function is_npc_in_combat(npc)
    return state_mgr.is_npc_in_combat(npc)
end

function is_in_combat(npc)
    if not npc or not is_alive(npc) then
        log.warn('is_in_combat called on dead or nil npc')
        return false
    end
    if is_player(npc) then
        return #get_enemies_fighting_player() ~= 0
    end
    return is_npc_in_combat(npc) or is_enemy_fighting_player(npc) -- doesnt seem reliable?
end

-- FACTIONS

function get_faction(npc)
    local faction = try(character_community, npc) or "no faction"
    return faction
end

function get_rank(npc)
    return try(ranks.get_obj_rank_name, npc) or ""
end

function get_real_player_faction()
    return get_actor_true_community()
end

-- WORLD
function get_location_technical_name()
    return level.name() or ''
end

function get_location_name()
    local technical_name = get_location_technical_name()
    return game.translate_string(technical_name)
end

function iterate_nearest(location, distance, fun)
    level.iterate_nearest(location, distance, fun)
end

function is_living_character(obj)
    must_exist(obj, "is_living_character")
    return obj and is_stalker(obj) and obj:alive()
end

-- Function to get a list of nearby allies
function get_nearby_characters(center_object, distance, max, exclusion_list)
    -- Validate and set defaults for optional parameters
    distance = distance or config.EVENT_WITNESS_RANGE
    exclusion_list = exclusion_list or {}


    local location = get_position(center_object)
    if location == nil then return {} end

    local characters = {}
    local count = 0
    local function on_each_object(obj)
        if is_living_character(obj) then
            table.insert(characters, obj)

            count = count + 1
            if max and count >= max then
                return false
            end
        end
    end
    level.iterate_nearest(location, distance, on_each_object)
    return characters
end

--- Retrieves all companions from the player's squad excluding a specific NPC.
-- @param exclude_npc The NPC to be excluded from the selection. If nil, no NPC is excluded.
-- @return A table of companion objects or an empty table if there are no eligible companions.
function get_companions(exclude_npc_id)
    local companion_table = axr_companions.list_actor_squad_by_id()  -- Retrieves a list of companion actors
    local filtered_companion_table = {}

    -- Filter out the excluded NPC
    for _, npc_id in ipairs(companion_table) do
        local npc_obj = get_obj_by_id(npc_id)
        if npc_obj and npc_obj:alive() and npc_id ~= exclude_npc_id then
            table.insert(filtered_companion_table, npc_obj)
        end
    end

    -- If all companions are excluded or if there are no companions, return an empty table
    if #filtered_companion_table == 0 then
        return {}
    end

    -- Return the table of companions
    return filtered_companion_table
end

function get_obj_by_id(id)
    -- convert to number
    id = tonumber(id)
    if not id then
        error("get_obj_by_id called with nil id")
    end
    return try(get_object_by_id, id)
end

function get_position(object)
    if not object then
        error("get_position called with nil object")
     end
    return object:position()
end

function is_same_obj(obj1, obj2)
    if not obj1 or not obj2 then return false end
    -- Check if both objects have the 'id' method
    if type(obj1.id) ~= "function" or type(obj2.id) ~= "function" then
        log.errors("One or both objects do not have an 'id' method", 4)
        return false
    end
    -- Compare the ids of the objects
    return obj1:id() == obj2:id()
end

function get_distance_between(obj1, obj2)
    -- Check if either object is nil
    if not obj1 or not obj2 then
        log.errors("get_distance_between called with nil object, defaulting to far away")
        return 100000
    end

    -- Check if both objects are the same
    if is_same_obj(obj1, obj2) then
        return 0
    end

    -- Safe call to calculate distance
    local status, result = pcall(distance_between_safe, obj1, obj2)

    -- Check for errors in the pcall
    if not status then
        -- Log the error
        log.errors("Error in distance_between_actually_safe: ", result)

        -- Return a large number to indicate error
        return 1000000
    end

    -- Return the calculated distance
    return result
end

function is_psy_storm_ongoing()
    return psi_storm_manager and psi_storm_manager.is_loaded() and psi_storm_manager.is_started()
end

function is_surge_ongoing()
    return surge_manager and surge_manager.is_loaded() and surge_manager.is_started()
end


--------------------------------------------------------------------------------
-- XML Loading
--------------------------------------------------------------------------------

-- Load a translated string from the game's XML files
function load_xml(input)
    if not input then return "" end
    key = "talker_" .. input
    local result = game.translate_string("talker_" .. input) or game.translate_string(input)
    if result == key then
        log.warn("Translation not found for " .. input)
    end
    return result == "talkerIgnore" and "" or result
end

-- Load a random XML translation based on a given input
function load_random_xml(input)
    local translations = {}
    local baseKey = "talker_" .. input
    local i = 1
    while true do -- always a good idea, right?
        local key = baseKey .. "_" .. i
        local translation = game.translate_string(key)
        if translation == key then break end
        table.insert(translations, translation)
        i = i + 1
    end
    if #translations > 0 then
        return translations[math.random(1, #translations)]
    else
        log.warn("no xml found for " .. input)
    end
end

-- HUD

function display_hud_message(message)
    actor_menu.set_msg(1, message, 3)
end

-- SOUND

function play_sound(sound_name)
    xr_sound.set_sound_play(AC_ID, sound_name)
end

-- NEWS TIP

function send_news_tip(sender_name, message, image, showtime)
    db.actor:give_game_news(sender_name, message, image, 0, showtime)
end



-- Check if the sender is valid
function is_living_character(character)
    return is_stalker(character) and character:alive()
end



--------------------------------------------------------------------------------
-- UNIQUE NPCS
--------------------------------------------------------------------------------
-- TODO: This would work better as an xml with a key value pair format


function Set(t)
    local s = {}
    for _,v in pairs(t) do s[v] = true end
    return s
end

local important_npcs = Set {

"actor",                                                    -- player


    --[[ CORDON ]]--
"esc_m_trader",                                             -- Sidorovich
"m_trader",                                                 -- Sidorovich
"esc_2_12_stalker_nimble",									-- Nimble
"esc_2_12_stalker_wolf",									-- Wolf
"esc_2_12_stalker_fanat",									-- Fanatic
"esc_2_12_stalker_trader", 									-- Sidorovich
"esc_smart_terrain_5_7_loner_mechanic_stalker", 			-- Xenotech
"devushka", 												-- Hip
"esc_main_base_trader_mlr",									-- Loris
"esc_3_16_military_trader",									-- Major Zhurov
"army_south_mechan_mlr",									-- Seryoga

    --[[ GREAT SWAMPS ]]--

"mar_smart_terrain_doc_doctor",								-- Doctor
"mar_smart_terrain_base_stalker_leader_marsh",				-- Cold
"mar_base_stalker_tech",									-- Novikov
"mar_base_owl_stalker_trader",								-- Spore
"mar_smart_terrain_base_doctor",							-- Professor Kalancha
"guid_marsh_mlr",											-- Ivan Trodnik
"mar_base_stalker_barmen",									-- Librarian

    --[[ DARKSCAPE ]]--

"dasc_tech_mlr",											-- Polymer
"dasc_trade_mlr",											-- Cutter
"ds_domik_isg_leader",										-- Major Hernandez

    --[[ GARBAGE ]]--

"hunter_gar_trader",										-- Butcher

    --[[ AGROPROM ]]--

"agr_smart_terrain_1_6_near_2_military_colonel_kovalski",	-- Major Kuznetsov
"agr_1_6_medic_army_mlr",									-- Rogovets
"agr_smart_terrain_1_6_army_trader_stalker",				-- Sergeant Spooner
"agr_1_6_barman_army_mlr",									-- Commander
"agr_smart_terrain_1_6_army_mechanic_stalker",				-- Lieutenant Kirilov

    --[[ AGROPROM UNDERGROUND ]]--

"agr_u_bandit_boss",										-- Reefer

    --[[ DARK VALLEY ]]--

"zat_b7_bandit_boss_sultan",								-- Sultan
"val_smart_terrain_7_3_bandit_mechanic_stalker",			-- Limpid
"guid_dv_mal_mlr",											-- Pug
"val_smart_terrain_7_4_bandit_trader_stalker",				-- Olivius

    --[[ ROSTOK ]]--

"bar_visitors_barman_stalker_trader",						-- Barkeep
"bar_visitors_zhorik_stalker_guard2",						-- Zhorik
"bar_visitors_garik_stalker_guard",							-- Garik
"bar_informator_mlr",										-- Snitch
"guid_bar_stalker_navigator",								-- Navigator
"bar_arena_manager",										-- Arnie
"bar_arena_guard",											-- Liolik
"bar_dolg_leader",											-- General Voronin
"bar_dolg_general_petrenko_stalker", 						-- Colonel Petrenko
"bar_dolg_medic", 											-- Aspirin
"bar_visitors_stalker_mechanic",							-- Mangun
"bar_zastava_2_commander",									-- Sergeant Kitsenko
"bar_duty_security_squad_leader",							-- Captain Gavrilenko

    --[[ YANTAR ]]--

"yan_stalker_sakharov", 									-- Professor Sakharov
"mechanic_army_yan_mlr", 									-- Peregrine
"yan_povar_army_mlr", 										-- Spirit
"yan_ecolog_kruglov",										-- Professor Kruglov

    --[[ ARMY WAREHOUSES ]]--

"mil_smart_terrain_7_7_freedom_leader_stalker", 			-- Lukash
"mil_freedom_medic", 										-- Solid
"mil_smart_terrain_7_10_freedom_trader_stalker", 			-- Skinflint
"mil_smart_terrain_7_7_freedom_mechanic_stalker", 			-- Screw
"mil_freedom_guid", 										-- Leshiy
"stalker_gatekeeper", 										-- Gatekeeper

    --[[ DEAD CITY ]]--

"cit_killers_merc_mechanic_stalker", 						-- Hog
"cit_killers_merc_trader_stalker", 							-- Dushman
"ds_killer_guide_main_base", 								-- Leopard
"cit_killers_merc_barman_mlr", 								-- Aslan
"cit_killers_merc_medic_stalker", 							-- Surgeon

    --[[ RED FOREST ]]--

"red_forester_tech", 										-- Forester
"red_greh_trader",											-- Stribog
"red_greh_tech",											-- Dazhbog

    --[[ DESERTED HOSPITAL ]]--

"kat_greh_sabaoth", 										-- Chernobog and variants
"gen_greh_sabaoth",
"sar_greh_sabaoth",

    --[[ JUPITER ]]--

"jup_b220_trapper", 										-- Trapper
"jup_a6_stalker_barmen", 									-- Hawaiian
"guid_jup_stalker_garik", 									-- Garry
"jup_a6_stalker_medik", 									-- Bonesetter
"zat_a2_stalker_mechanic", 									-- Cardan
"jup_b217_stalker_tech", 									-- Nitro
"jup_a6_freedom_trader_ashot", 								-- Ashot
"jup_a6_freedom_leader", 									-- Loki
"jup_b6_scientist_tech", 									-- Tukarev
"jup_b6_scientist_nuclear_physicist", 						-- Professor Hermann
"jup_b6_scientist_biochemist", 								-- Professor Ozersky
"jup_depo_isg_leader",										-- Major Hernandez
"jup_cont_mech_bandit",										-- Nile
"jup_cont_trader_bandit",									-- Klenov
"jup_depo_isg_tech",										-- Lieutenant Maus

    --[[ ZATON ]]--

"zat_stancia_mech_merc", 									-- Kolin
"zat_stancia_trader_merc", 									-- Vector
"zat_a2_stalker_nimble", 									-- Nimble
"zat_b30_owl_stalker_trader", 								-- Owl
"zat_tech_mlr", 											-- Spleen
"zat_b22_stalker_medic", 									-- Axel
"zat_a2_stalker_barmen", 									-- Beard
"zat_b18_noah", 											-- Noah
"guid_zan_stalker_locman", 									-- Pilot
"zat_b106_stalker_gonta",									-- Gonta
"zat_b106_stalker_garmata", 								-- Garmata
"zat_b106_stalker_crab", 									-- Crab
"army_degtyarev_jup",                                      	-- Colonel Degtyarev and variants
"army_degtyarev",
"stalker_rogue",											-- Rogue and variants
"stalker_rogue_ms",
"stalker_rogue_oa",
"zat_b7_stalker_victim_1",									-- Spartacus

    --[[ OUTSKIRTS ]]--

"pri_monolith_monolith_trader_stalker", 					-- Krolik
"lider_monolith_haron", 									-- Charon
"pri_monolith_monolith_mechanic_stalker", 					-- Cleric
"monolith_eidolon", 										-- Eidolon
"guid_pri_a15_mlr", 										-- Tourist
"trader_pri_a15_mlr", 										-- Cashier
"pri_medic_stalker", 										-- Yar
"merc_pri_a18_mech_mlr", 									-- Trunk
"pri_special_trader_mlr", 									-- Meeker
"merc_pri_grifon_mlr", 										-- Griffin
"mechanic_monolith_kbo", 									-- Bracer
"trader_monolith_kbo", 										-- Olivar
"stalker_stitch", 											-- Stitch and variants
"stalker_stitch_ms",
"stalker_stitch_oa",
"lost_stalker_strelok", 									-- Strelok and variants
"stalker_strelok_hb",
"stalker_strelok_oa",
"lazarus_stalker",

}

function is_unique_character_by_id(npc_id)
    local npc = get_obj_by_id(npc_id)
    if is_player(npc) then return true end
    if not npc or not is_stalker(npc) then return false end
    local technical_name = get_technical_name(npc)
    local result = important_npcs[technical_name] ~= nil
    return result
end

function get_unique_character_personality(npc_id)
    local npc = get_obj_by_id(npc_id)
    local technical_name = get_technical_name(npc)
    if important_npcs[technical_name] == nil then return nil end
end

--------------------------------------------------------------------------------
-- WORLD DESCRIPTION
--------------------------------------------------------------------------------

function get_time_scope(EventDate, scope)
    local Y, M, D, h, mint, sec, ms = EventDate:get()
    local tbl = {Y, M, D, h, mint, sec, ms}
    return tbl[scope]
end


-- Function to get the current time as a string representing the time phase of the day
function describe_current_time()
    local hrs = get_time_scope(game.get_game_time(), 4)
    if hrs < 6 then
        return "night"
    elseif hrs < 10 then
        return "morning"
    elseif hrs < 15 then
        return "noon"
    elseif hrs < 20 then
        return "evening"
    else
        return "night" -- Assuming hrs >= 20 falls into night
    end
end

-- Returns "ONGOING EMISSION" if an emission is ongoing, "ONGOING PSI STORM" if a psi storm is ongoing, and "" otherwise
function describe_emission()
	if is_psy_storm_ongoing() then
		return "ongoing psy storm"
	end
	if is_surge_ongoing() then
		return "ongoing emission"
	end
	return ""
end

function describe_weather()
    -- todo better descriptions, see the gossip generator
    local weather_manager = level_weathers.get_weather_manager()
    local weather_description = weather_manager:get_curr_weather()
    -- if 'partly' translate to partially cloudy
    if weather_description == "partly" then
        weather_description = "partially cloudy"
    end
    -- override weather_description with ongoing emission or psi storm if applicable
    weather_description = describe_emission() ~= "" and "an " .. describe_emission() or weather_description
    return weather_description
end

function describe_shelter(speaker, listener) -- only really works for the player, but we assume they are with them for this
    if not is_player(speaker) and not is_player(listener) then return "" end
    local rain_factor = level.rain_factor()
    local rain_exposure =  level.rain_hemi()
    if rain_factor > 0.2 and rain_exposure < 0.1 then return "and sheltering inside" end
    return ""
end

function describe_world(speaker, listener)
    local weather_description = describe_weather()
    local location_name = get_location_name()
    local time_description = describe_current_time()
    local shelter_description = describe_shelter(speaker, listener)
    local formattedString = string.format("In %s at %s %s during %s weather.", location_name, time_description, shelter_description, weather_description)
    return formattedString
end


------------------------------------------------------------------------------------
-- TIME
------------------------------------------------------------------------------------

function delay(eventId, actionId, seconds, func, ...)
    CreateTimeEvent(eventId, actionId, seconds, func, ...)
end

function reset_delay(event_id, act_id, seconds)
    ResetTimeEvent(event_id, act_id, seconds)
end


-- since time global only counts from the last save, we need to keep adding to it
local game_time_since_last_load = 0
function get_game_time_ms()
    return time_global() + game_time_since_last_load
end

function save_game_time(saved_data)
    log.info("Saving game time...")
    saved_data.game_time_since_last_load = get_game_time_ms()
end

function load_game_time(saved_data)
    if (saved_data.game_time_since_last_load) then
        log.info("Loading game time...")
        game_time_since_last_load = saved_data.game_time_since_last_load
    end
end

--------------------------------------------------------------------------------
-- callbacks
--------------------------------------------------------------------------------
function on_game_start()
    RegisterScriptCallback("save_state", save_game_time)
    RegisterScriptCallback("load_state", load_game_time)
end

--------------------------------------------------------------------------------
-- Load check
--------------------------------------------------------------------------------

function is_loaded()
    return true
end

