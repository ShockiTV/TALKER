--------------------------------------------------------------------------------
-- LEVEL CHANGE COMMENTS
--------------------------------------------------------------------------------

-- Imports
package.path = package.path .. ";./core/lua/?.lua;"
local interface = require("interface.interface")
local locations = require('infra.STALKER.locations')
local game = require("infra.game_adapter")

-- Saved variable to track the number of visits to each map
local level_visit_count = {}
local commented_already = false

-- Function to handle map change event
-- @param previous_map String name of the previous map
-- @param current_map String name of the current map
function on_map_change_event(previous_map, current_map)
    if not current_map or not previous_map then return end

    -- Update visit count for the current map
    level_visit_count[current_map] = (level_visit_count[current_map] or 0) + 1

    -- Determine the number of visits for messaging
    local visit_count = level_visit_count[current_map]

    local visit_amount
    visit_amount = visit_count > 3 and "again" or (visit_count > 1 and "for the " .. visit_count .. "th time" or "for the first time")
    -- Get a random companion for the comment

    local previous_map_name = locations.get_location_name(previous_map)
    local current_map_description = locations.describe_location_detailed(current_map)

    local witnesses = game.get_companions()
    table.insert(witnesses, game.get_player_character())
    interface.register_game_event("you traveled from %s to %s %s.", {previous_map_name, current_map_description, visit_amount}, witnesses, true)
end

local previous_map
function has_map_changed(current_map)
    return previous_map and previous_map ~= current_map
end


function on_loading_screen_dismissed()
    local current_map = level.name()
    if has_map_changed(current_map) then
        on_map_change_event(previous_map, current_map)
    end
end

function on_loading_screen_dismissed_safe()
    local status, err = pcall(on_loading_screen_dismissed)
    if not status then
        print("Error in on_loading_screen_dismissed_safe: " .. err)
    end
end

--------------------------------------------------------------------------------
-- SAVING AND LOADING
--------------------------------------------------------------------------------

-- Function to save the state
function save_state(m_data)
    m_data.level_visit_count = level_visit_count or {}
    m_data.level_visit_count = commented_already
    m_data.previous_map = level.name()
end

-- Function to load the state
function load_state(m_data)
    level_visit_count = m_data.level_visit_count or {}
    commented_already = m_data.commented_already
    previous_map = m_data.previous_map
end

--------------------------------------------------------------------------------
-- callbacks
--------------------------------------------------------------------------------
function on_game_start()
    RegisterScriptCallback("on_level_changing", "on_level_changing")
    RegisterScriptCallback("on_loading_screen_dismissed", on_loading_screen_dismissed_safe)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end