


local language = require("infra.language")

function on_mcm_load()
    options = {
        id = "talker",
        sh = true,
        gr = {
            -- Model Choice
            {
                id = "gpt_version",
                type = "radio_h",
                val = "gpt-4o",
                def = "gpt-4o",
                content = {
                    {"gpt-4o-mini", "gpt-4o-mini"},
                    {"gpt-4o", "gpt-4o"},
                    {"gpt-4-turbo", "gpt-4-turbo"}
                }
            },
            {
                id = "ai_model_method",
                type = "radio_h",
                val = "0",
                def = "0",
                content = {
                    {"0", "open-ai"},
                    {"1", "open-router-ai"},
                    {"2", "local-deepseek"},
                    {"3", "proxy"},
                }
            },
            {
                id = "custom_ai_model",
                type = "input",
                val = "gemini/gemini-2.5-flash",
                def = "gemini/gemini-2.5-flash",
            },
            {
                id = "custom_ai_model_fast",
                type = "input",
                val = "gemini/gemini-2.5-flash-lite-preview-06-17",
                def = "gemini/gemini-2.5-flash-lite-preview-06-17",
            },
            {
                id = "reasoning_level",
                type = "radio_h",
                val = "-1",
                def = "-1",
                content = {
                    {"-1", "Auto"},
                    {"0", "None"},
                    {"1", "Low"},
                    {"2", "Medium"},
                    {"3", "High"},
                },
                name = "ui_mcm_talker_reasoning_level"
            },
            {
                id = "voice_provider",
                type = "radio_h",
                val = "0",
                def = "2",
                content = {
                    {"0", "local-whisper"},
                    {"1", "openai-whisper"},
                    {"2", "gemini-proxy"},
                },
                name = "ui_mcm_talker_voice_provider"
            },
 
            -- Language Selection
            {
                id = "language",
                type = "radio_h",
                val = language.any.long,
                def = language.any.long,
                content = {
                    { language.any.long, language.any.long },
                    { language.en.long, language.en.long },
                    { language.uk.long, language.uk.long },
                    { language.ru.long, language.ru.long },
                },
                name = "ui_mcm_talker_language"
            },
            
            -- Speak Key UI
            {
                id = "speak_key_title",
                type = "desc",
                clr = {200, 200, 255, 200},
                text = "ui_mcm_talker_speak_key_title"
            },
            {
                id = "speak_key_description",
                type = "desc",
                text = "ui_mcm_talker_speak_key_description"
            },
            {
                id = "speak_key",
                type = "key_bind",
                val = 2,
                def = DIK_keys.DIK_LMENU
            },
        }
    }
    return options
end

-- Default configuration values
local defaults = {
    ["speak_key"] = DIK_keys.DIK_LMENU,
    ["gpt_version"] = "gpt-4o",
    ["language"] = language.any.long,
    ["ai_model_method"] = 0,
    ["custom_ai_model"] = "google/gemini-2.0-flash-001",
    ["custom_ai_model_fast"] = "openai/gpt-4o-mini",
    ["voice_provider"] = 2,
    ["reasoning_level"] = -1,
}

-- Function to retrieve the configuration value
function get(key)
    if ui_mcm then
        return ui_mcm.get("talker/" .. key)
    else
        return defaults[key]
    end
end
